# -*- coding: utf-8 -*-
"""ClinicalTrialsLandscape.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DEMORTOKwaZcohNT4btQnMgRyKppREi4
"""

import requests
import pandas as pd
from numpy import nan

country = input("Enter Country Name: ")
    # Initial URL for the first API call
base_url = "https://clinicaltrials.gov/api/v2/studies"
params = {
    "query.locn": country,
    "pageSize": 100,
}
# Initialize an empty list to store the data
data_list = []

# Loop until there is no nextPageToken
while True:
    # Print the current URL (for debugging purposes)
    print("Fetching data from:", base_url + '?' + '&'.join([f"{k}={v}" for k, v in params.items()]))

    # Send a GET request to the API
    response = requests.get(base_url, params=params)

    # Check if the request was successful
    if response.status_code == 200:
        data = response.json()  # Parse JSON response
        studies = data.get('studies', [])  # Extract the list of studies

        # Loop through each study and extract basic study information, as well as enrollment counts
        for study in studies:
            # Safely access nested keys
            nctId = study['protocolSection']['identificationModule'].get('nctId', 'Unknown')

            overallStatus = study['protocolSection']['statusModule'].get('overallStatus', 'Unknown')

            leadSponsor = study['protocolSection']['sponsorCollaboratorsModule'].get('leadSponsor', 'Unknown').get('name', 'Unknown')

            startDate = study['protocolSection']['statusModule'].get('startDateStruct', {}).get('date', 'Unknown Date')
            endDate = study['protocolSection']['statusModule'].get('completionDateStruct', {}).get('date','Unknown Date')

            studyType = study['protocolSection']['designModule'].get('studyType', 'Unknown')
            phases = ', '.join(study['protocolSection']['designModule'].get('phases', ['Not Available']))

            interventions_list = study['protocolSection'].get('armsInterventionsModule', {}).get('interventions', [])
            interventions = ', '.join([intervention.get('name', 'No intervention name listed') for intervention in interventions_list]) if interventions_list else "No interventions listed"
            conditions_list = study['protocolSection'].get('conditionsModule', {}).get('conditions', [])
            conditions = ', '.join(conditions_list) if conditions_list else "No conditions listed"

            enrollment = study['protocolSection']['designModule'].get('enrollmentInfo',{}).get('count',nan)

            # Append the data to the list as a dictionary
            data_list.append({
                "Country": country,
                "NCT ID": nctId,
                "Overall Status": overallStatus,
                "Lead Sponsor": leadSponsor,
                "Start Date": startDate,
                "End Date": endDate,
                "Study Type": studyType,
                "Phases": phases,
                "Interventions": interventions,
                "Conditions": conditions,
                "Enrollment": enrollment
            })

        # Check for nextPageToken and update the params or break the loop
        nextPageToken = data.get('nextPageToken')
        if nextPageToken:
            params['pageToken'] = nextPageToken  # Set the pageToken for the next request
        else:
            break  # Exit the loop if no nextPageToken is present
    else:
        print("Failed to fetch data. Status code:", response.status_code)
        break

# Create a DataFrame from the list of dictionaries
df = pd.DataFrame(data_list)

# Print the DataFrame
print(df)
print("total amount of studies gathered: " + str(len(df)))
df.to_csv("clinical_trials_data_complete.csv", index=False)

